#include <stdio.h>
#include <stdlib.h> // Para usar abs()

// Constantes para o tamanho do tabuleiro e valores simbólicos
#define TAM_TABULEIRO 10
#define TAM_HABILIDADE 5
#define NAVIO 3
#define AGUA 0
#define AREA_HABILIDADE 5

// Função para inicializar o tabuleiro com água e adicionar navios manualmente
void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            tabuleiro[i][j] = AGUA;
        }
    }

    // Adiciona alguns navios manualmente como exemplo
    tabuleiro[2][2] = NAVIO;
    tabuleiro[3][3] = NAVIO;
    tabuleiro[4][4] = NAVIO;
    tabuleiro[6][7] = NAVIO;
}

// Função para imprimir o tabuleiro com símbolos visuais
void imprimirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    printf("=== TABULEIRO ===\n\n");
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            if (tabuleiro[i][j] == AGUA)
                printf("~ "); // Água
            else if (tabuleiro[i][j] == NAVIO)
                printf("N "); // Navio
            else if (tabuleiro[i][j] == AREA_HABILIDADE)
                printf("* "); // Área de habilidade
        }
        printf("\n");
    }
    printf("\n");
}

// Cria uma matriz com área em forma de cone
void criarCone(int matriz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            matriz[i][j] = 0; // Inicializa com 0 (não afetado)
        }
    }

    // Constrói o cone apontando para baixo (origem no topo)
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        int inicio = 2 - i;  // Limite esquerdo da linha
        int fim = 2 + i;     // Limite direito da linha
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (j >= inicio && j <= fim) {
                matriz[i][j] = 1; // Marcado como área afetada
            }
        }
    }
}

// Cria uma matriz com área em forma de cruz
void criarCruz(int matriz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (i == 2 || j == 2)
                matriz[i][j] = 1; // Cruz com centro como origem
            else
                matriz[i][j] = 0;
        }
    }
}

// Cria uma matriz com área em forma de octaedro (losango)
void criarOctaedro(int matriz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            // Usa a soma das distâncias relativas ao centro para formar um losango
            if (abs(i - 2) + abs(j - 2) <= 2)
                matriz[i][j] = 1;
            else
                matriz[i][j] = 0;
        }
    }
}

// Sobrepõe uma habilidade ao tabuleiro a partir de uma coordenada de origem
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int habilidade[TAM_HABILIDADE][TAM_HABILIDADE], int origemLinha, int origemColuna) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            // Calcula a posição correspondente no tabuleiro
            int linhaTab = origemLinha + i - 2;
            int colunaTab = origemColuna + j - 2;

            // Garante que está dentro dos limites do tabuleiro
            if (linhaTab >= 0 && linhaTab < TAM_TABULEIRO && colunaTab >= 0 && colunaTab < TAM_TABULEIRO) {
                // Marca com 5 apenas se for água (não sobrescreve navio)
                if (habilidade[i][j] == 1 && tabuleiro[linhaTab][colunaTab] == AGUA) {
                    tabuleiro[linhaTab][colunaTab] = AREA_HABILIDADE;
                }
            }
        }
    }
}

// Função principal
int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO];
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    // Inicializa o tabuleiro e posiciona navios
    inicializarTabuleiro(tabuleiro);

    // Cria as matrizes das habilidades
    criarCone(cone);
    criarCruz(cruz);
    criarOctaedro(octaedro);

    // Aplica as habilidades em pontos fixos do tabuleiro
    aplicarHabilidade(tabuleiro, cone, 2, 2);       // Cone em (2,2)
    aplicarHabilidade(tabuleiro, cruz, 5, 5);       // Cruz em (5,5)
    aplicarHabilidade(tabuleiro, octaedro, 7, 7);   // Octaedro em (7,7)

    // Exibe o tabuleiro final
    imprimirTabuleiro(tabuleiro);

    return 0;
}
